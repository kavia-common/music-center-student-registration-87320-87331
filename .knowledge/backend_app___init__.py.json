{"is_source_file": true, "format": "Python", "description": "This is the '__init__.py' file inside a Flask application's app package. It sets up the Flask app, configures CORS, OpenAPI, database connection, initializes extensions, registers blueprints, and creates the database tables.", "external_files": ["flask", "flask_cors", "flask_smorest", ".routes.health", ".routes.students", ".models"], "external_methods": ["flask.Flask", "flask_cors.CORS", "flask_smorest.Api", ".models.build_mysql_uri_from_env_or_file", "pymysql.install_as_MySQLdb", "db.init_app", "api.register_blueprint", "db.create_all"], "published": [], "classes": [{"name": "Flask", "description": "Main Flask application object."}, {"name": "Api", "description": "API object for Swagger/OpenAPI integration."}], "methods": [{"name": "build_mysql_uri_from_env_or_file", "description": "Builds the MySQL database URI from environment variables or a configuration file."}, {"name": "install_as_MySQLdb", "description": "Allows PyMySQL to be used as a drop-in replacement for MySQLdb."}, {"name": "init_app", "description": "Initializes the SQLAlchemy database extension with the app."}, {"name": "register_blueprint", "description": "Registers a Flask blueprint (routes) with the API."}, {"name": "create_all", "description": "Creates all database tables defined in SQLAlchemy models if they do not exist."}, {"name": "log_request_info()", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["flask.Flask(__name__)", "CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})", "Api(app)", "build_mysql_uri_from_env_or_file()", "pymysql.install_as_MySQLdb()", "db.init_app(app)", "api.register_blueprint(health_blp)", "api.register_blueprint(students_blp)", "db.create_all()"], "search-terms": ["Flask app setup", "Swagger/OpenAPI configuration", "CORS configuration", "MySQL database setup", "register blueprints", "create database tables"], "state": 2, "file_id": 3, "knowledge_revision": 30, "git_revision": "7439e2506abc8e25f590cce1680d3b41ee5ba172", "revision_history": [{"10": "590dd44234a4f35922081d1e71deeba61fedae91"}, {"18": "590dd44234a4f35922081d1e71deeba61fedae91"}, {"24": "d2a2b25f20e09c1d09d0d28ad41689efae243316"}, {"25": "d2a2b25f20e09c1d09d0d28ad41689efae243316"}, {"28": "7439e2506abc8e25f590cce1680d3b41ee5ba172"}, {"30": "7439e2506abc8e25f590cce1680d3b41ee5ba172"}], "ctags": [{"_type": "tag", "name": "api", "path": "/home/kavia/workspace/code-generation/music-center-student-registration-87320-87331/backend/app/__init__.py", "pattern": "/^api = Api(app)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "app", "path": "/home/kavia/workspace/code-generation/music-center-student-registration-87320-87331/backend/app/__init__.py", "pattern": "/^app = Flask(__name__)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "health_blp", "path": "/home/kavia/workspace/code-generation/music-center-student-registration-87320-87331/backend/app/__init__.py", "pattern": "/^from .routes.health import blp as health_blp$/", "language": "Python", "kind": "unknown", "nameref": "unknown:blp"}, {"_type": "tag", "name": "log_request_info", "path": "/home/kavia/workspace/code-generation/music-center-student-registration-87320-87331/backend/app/__init__.py", "pattern": "/^def log_request_info():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "logger", "path": "/home/kavia/workspace/code-generation/music-center-student-registration-87320-87331/backend/app/__init__.py", "pattern": "/^logger = logging.getLogger(__name__)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "students_blp", "path": "/home/kavia/workspace/code-generation/music-center-student-registration-87320-87331/backend/app/__init__.py", "pattern": "/^from .routes.students import blp as students_blp$/", "language": "Python", "kind": "unknown", "nameref": "unknown:blp"}], "hash": "26ce4e0abaef8d435141e5c8af6e235e", "format-version": 4, "code-base-name": "backend", "filename": "backend/app/__init__.py", "fields": [{"name": "api = Api(app)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "app = Flask(__name__)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "logger = logging.getLogger(__name__)", "scope": "", "scopeKind": "", "description": "unavailable"}]}